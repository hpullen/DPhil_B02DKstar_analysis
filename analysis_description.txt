1. Output of Ganga jobs is moved to the correctly named location in /data/lhcb/users/pullen/gangadir/job_output. Data is stored under data/{two|four}Body/{year}_{up|down}. Signal Monte Carlo is stored under MC/{two|four}Body/{mode}/{year}_{up|down}. Monte Carlo for various backgrounds is stored under MC/backgrounds/, with further subdirectories for background type including Bs, lowMass, Bs_lowMass, and rho. DaVinci scripts are saved here. 
2. The Ganga outputs are merged into a single, smaller nTuple using Merge_ganga_tuples/MakeTuple. This takes all root files from the Ganga subjobs, and applies trigger requirements and cuts on the K*0 mass and helicity angle. This saves on storage space and time, as the nTuples contain all DKpi final states, not just the K*0 resonance, so are very large. If run on a data sample, all but the relevant branches are turn off, again to save on space and time. Since Monte Carlo files are smaller to begin with, all branches are left all. With Snakemake, this step is implemented using snake_modules/Merge_data.snake and snake_modules/Merge_MC.snake. (In: directories of subjobs in gangadir. Out: mode.root.)
3. BDTs are trained using data and signal Monte Carlo. One is trained for each of Kpi, KK, pipi, Kpipipi and pipipipi. The executable BDT/Code/TrainMVA is used. This step is implemented in snake_modules/Train_BDT.snake. Inputs are merged data and Monte Carlo files, and outputs are weights files under BDT/Code/weights/TMVAClassification_BDTG_{mode}}_run2.weights.xml. (In: mode.root in Run 2 data and signal Monte Carlo directories. Out: weights files.)
4. BDTs are applied to each of the merged nTuples using BDT/Code/ApplyMVA. Only events with BDT response > -0.5 are retained. At this stage, several useful variables are calculated and added to the nTuple, including D0 flight distance significance and double mis-ID D mass. These are saved as {mode}_withBDT.root. This step is done by snake_modes/Apply_BDT.snake. (In: weights. Out: {mode}_withBDT.root in each data and MC category.)
5. Selected nTuples are made using scripts in Make_tuples/Code. For data, the goal is to make an nTuple which can be quickly read in for fitting. All of the final selection cuts, including PID, are applied, except for the BDT cut. This allows for testing and optimisation of the BDT cut with these nTuples. For Monte Carlo, all selection cuts including the current working point BDT cut are applied, except for the PID cuts. This allows samples which can be used for efficiency calculations. These are all saved as {mode}_selected.root. This is done in snake_modules/Make_selection.snake. (In: nTuples with BDT applied. Out: selected nTuples.)
6. Effiencies are calculated using selected Monte Carlo samples, and results are saved to Efficiencies/Values. These are read into the fit. The script count_events.sh loops through Ganga logfiles to get the original number of events for each signal Monte Carlo sample (this saves looking it up in the bookkeeping). SelectionEfficiency then uses this file and the number of events in each selected nTuple to calculate the selection efficiency and error, and prints to a file. MC nTuples with PID efficiency applied must be produced externally using PIDCalib. PIDefficiency takes these files and calculates the weighted mean efficiency and naive error. WeightEfficiencies takes a file of efficiencies for each year and polarity, and weights them by amount of data taken in each category, giving a single number for each mode. (In: selected Monte Carlo samples, selected Monte Carlo with PID efficiencies. Out: efficiency files: PID_efficiency_average.txt and selection_efficiency_average.txt.)
7. Fitting to Monte Carlo is done under Fit_monte_carlo. Fits are performed for signal, Bs, low mass, and rho shapes. Results are saved to Results, and these files are read into the fit to data. (In: Monte Carlo with BDTG (change to selected Monte Carlo?) Out: results files and plots.)
8. Fitting to data: inputs are selected data nTuples, Monte Carlo fit results, efficiencies. Output is RooFitResult and plots. Toys can also be produced here, and these are saved to the toys directory in the data location. Custom BDT cuts for each BDT can be provided as input arguments.
9. BDT cut optimization: contains scripts for running fits with many different BDT cuts, and plotting the results.
10. Toy_studies: contains scripts for setting off many toy jobs, and a script for plotting results of a toy study (including fitting to pulls).
11. Libraries: contains some shared scripts: low mass PDF shapes and ROOT style options.
